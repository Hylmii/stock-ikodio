/**
 * Google Gemini AI Service
 * Provides AI-powered stock analysis and company insights
 */

const GEMINI_API_KEY = "AIzaSyAsXgvCtUp8lY_y6HX8We90J_tbR2t7iGw";
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export interface GeminiAnalysis {
  summary: string;
  keyInsights: string[];
  recentNews: string[];
  marketSentiment: "bullish" | "bearish" | "neutral";
  risks: string[];
  opportunities: string[];
  recommendation: string;
}

/**
 * Generate comprehensive stock analysis using Gemini AI with retry mechanism
 */
export async function generateStockAnalysis(
  symbol: string,
  currentPrice: number,
  predictedPrice: number,
  signal: string,
  metrics: any
): Promise<GeminiAnalysis> {
  const maxRetries = 3;
  let lastError: Error | null = null;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const priceChange =
        ((predictedPrice - currentPrice) / currentPrice) * 100;

      const prompt = `You are an expert financial analyst. Provide a comprehensive analysis for stock ${symbol}.

Current Data:
- Symbol: ${symbol}
- Current Price: $${currentPrice.toFixed(2)}
- Predicted Price: $${predictedPrice.toFixed(2)}
- Price Change: ${priceChange.toFixed(2)}%
- Trading Signal: ${signal}
- Model Confidence: ${metrics.confidence}%
- MAPE (Accuracy): ${metrics.mape}%

Please provide:
1. A brief executive summary (2-3 sentences)
2. 3-5 key insights about the company's current situation
3. Recent news or events affecting the stock (if any)
4. Market sentiment (bullish/bearish/neutral)
5. 2-3 potential risks
6. 2-3 potential opportunities
7. Final recommendation for investors

Format your response as JSON with this structure:
{
  "summary": "executive summary here",
  "keyInsights": ["insight 1", "insight 2", ...],
  "recentNews": ["news 1", "news 2", ...],
  "marketSentiment": "bullish/bearish/neutral",
  "risks": ["risk 1", "risk 2", ...],
  "opportunities": ["opportunity 1", "opportunity 2", ...],
  "recommendation": "detailed recommendation here"
}

Important: Return ONLY valid JSON, no markdown formatting or code blocks.`;

      const response = await fetch(GEMINI_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": GEMINI_API_KEY,
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorData;

        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: { code: response.status, message: errorText } };
        }

        // If 503 (overloaded) or 429 (quota), retry after delay
        if (
          (errorData.error?.code === 503 || errorData.error?.code === 429) &&
          attempt < maxRetries
        ) {
          const delay = Math.pow(2, attempt) * 1000; // Exponential backoff: 2s, 4s, 8s
          console.warn(
            `Gemini API ${
              errorData.error?.code === 503 ? "overloaded" : "rate limited"
            }. Retrying in ${
              delay / 1000
            }s... (Attempt ${attempt}/${maxRetries})`
          );
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }

        throw new Error(
          `Gemini API error: ${errorData.error?.message || response.statusText}`
        );
      }

      const data = await response.json();

      if (!data.candidates || data.candidates.length === 0) {
        throw new Error("No analysis generated by Gemini");
      }

      const textContent = data.candidates[0].content.parts[0].text;

      // Remove markdown code blocks if present
      const cleanedText = textContent
        .replace(/```json\n?/g, "")
        .replace(/```\n?/g, "")
        .trim();

      // Parse the JSON response
      const analysis: GeminiAnalysis = JSON.parse(cleanedText);

      // Validate the response structure
      if (!analysis.summary || !analysis.marketSentiment) {
        throw new Error("Invalid analysis structure from Gemini");
      }

      return analysis;
    } catch (error) {
      lastError = error as Error;

      // If it's the last attempt or not a retriable error, break
      if (
        attempt === maxRetries ||
        !(
          error instanceof Error &&
          (error.message.includes("503") || error.message.includes("429"))
        )
      ) {
        break;
      }
    }
  }

  console.error("Failed to generate Gemini analysis after retries:", lastError);

  // Return enhanced fallback analysis
  return {
    summary: `Technical analysis for ${symbol} based on current market data and prediction model. The model shows a ${signal} signal with ${metrics.confidence.toFixed(
      0
    )}% confidence.`,
    keyInsights: [
      `Current price: $${currentPrice.toFixed(2)}`,
      `Predicted price: $${predictedPrice.toFixed(2)} (${(
        ((predictedPrice - currentPrice) / currentPrice) *
        100
      ).toFixed(2)}% change)`,
      `Trading signal: ${signal} with ${metrics.confidence.toFixed(
        0
      )}% confidence`,
      `Model accuracy (MAPE): ${metrics.mape.toFixed(2)}% - ${
        metrics.mape < 5
          ? "Excellent"
          : metrics.mape < 10
          ? "Very Good"
          : "Good"
      } accuracy`,
      `Prediction precision (RMSE): $${metrics.rmse.toFixed(4)}`,
    ],
    recentNews: [
      "AI analysis temporarily unavailable due to high demand. Using technical indicators for assessment.",
      "Please check financial news sources like Bloomberg, Reuters, or Yahoo Finance for the latest company updates.",
    ],
    marketSentiment:
      signal === "BUY" ? "bullish" : signal === "SELL" ? "bearish" : "neutral",
    risks: [
      "Market volatility may affect prediction accuracy",
      "External factors (news, earnings, macroeconomic events) not captured in technical analysis",
      "Past performance does not guarantee future results",
    ],
    opportunities: [
      signal === "BUY"
        ? "Technical indicators suggest potential upside momentum"
        : signal === "SELL"
        ? "Consider waiting for better entry point or use as exit signal"
        : "Monitor for clearer directional signals before taking action",
      "Use stop-loss orders to manage downside risk",
      "Consider position sizing based on your risk tolerance",
    ],
    recommendation: `Based on technical analysis using ${metrics.confidence.toFixed(
      0
    )}% confident model, the recommendation is ${signal}. The model shows ${
      metrics.mape < 5 ? "excellent" : metrics.mape < 10 ? "very good" : "good"
    } historical accuracy (${(100 - metrics.mape).toFixed(
      2
    )}% accurate). However, this analysis is for educational purposes only. Always conduct thorough fundamental and technical research, consider current market conditions, and consult with qualified financial advisors before making investment decisions. Consider your risk tolerance, investment horizon, and financial objectives.`,
  };
}

/**
 * Get quick market sentiment for a stock
 */
export async function getMarketSentiment(
  symbol: string
): Promise<"bullish" | "bearish" | "neutral"> {
  try {
    const prompt = `What is the current market sentiment for ${symbol} stock? Reply with only one word: bullish, bearish, or neutral.`;

    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
      }),
    });

    if (!response.ok) {
      return "neutral";
    }

    const data = await response.json();
    const sentiment = data.candidates[0].content.parts[0].text
      .toLowerCase()
      .trim();

    if (sentiment.includes("bullish")) return "bullish";
    if (sentiment.includes("bearish")) return "bearish";
    return "neutral";
  } catch (error) {
    console.error("Error getting sentiment:", error);
    return "neutral";
  }
}
