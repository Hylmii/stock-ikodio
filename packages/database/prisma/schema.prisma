// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  watchlist    Watchlist[]
  alerts       Alert[]
  predictions  PredictionHistory[]
  subscription Subscription?

  @@map("users")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String   // free, pro, enterprise
  status    String   // active, cancelled, expired
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  addedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlist")
}

model Alert {
  id           String   @id @default(cuid())
  userId       String
  symbol       String
  condition    String   // price_above, price_below, percent_change, volume_spike
  targetPrice  Float?
  targetValue  Float?
  status       String   @default("active") // active, triggered, cancelled
  triggered    Boolean  @default(false)
  triggeredAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model PredictionHistory {
  id              String   @id @default(cuid())
  userId          String?
  symbol          String
  timeframe       String
  predictedPrice  Float
  actualPrice     Float?
  confidence      Int
  accuracy        Float?
  indicators      Json     // Store technical indicators as JSON
  aiAnalysis      Json     // Store AI reasoning as JSON
  createdAt       DateTime @default(now())
  validatedAt     DateTime?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([symbol, createdAt])
  @@map("prediction_history")
}

model StockData {
  id          String   @id @default(cuid())
  symbol      String
  timestamp   DateTime
  open        Float
  high        Float
  low         Float
  close       Float
  volume      BigInt
  interval    String   // 1m, 5m, 15m, 1h, 4h, 1d, 1w, 1mo
  createdAt   DateTime @default(now())

  @@unique([symbol, timestamp, interval])
  @@index([symbol, interval, timestamp])
  @@map("stock_data")
}